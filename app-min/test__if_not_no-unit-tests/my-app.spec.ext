// @if ava
import test from 'ava';
// @endif
// @if tape
import test from 'tape';
// @endif
// @if mocha
import { expect } from 'chai';
// @endif
// @if shadow-dom
import { CustomElement } from 'aurelia';
// @endif
import { render } from './helper';
import { MyApp } from '../src/my-app';

// @if ava || tape
test('my-app: should render message', async t => {
  const node = (await render('<my-app></my-app>', MyApp)).firstElementChild;
  // @if shadow-dom
  // In Shadow DOM open mode, shadowRoot is also accessible through DOM API
  //   node.shadowRoot
  // But only Aurelia API can access shadowRoot in both open and closed mode.
  const shadowRoot = CustomElement.for(node).projector.provideEncapsulationSource();
  // @if babel
  const text = shadowRoot.textContent;
  // @endif
  // @if typescript
  const text = (shadowRoot as Node).textContent;
  // @endif
  // @endif
  // @if !shadow-dom
  const text =  node.textContent;
  // @endif
  // @if ava
  t.is(text.trim(), 'Hello World!');
  // @endif
  // @if tape
  t.equal(text.trim(), 'Hello World!');
  // @endif
});
// @endif
// @if jasmine || jest || mocha
describe('my-app', () => {
  it('should render message', async () => {
    const node = (await render('<my-app></my-app>', MyApp)).firstElementChild ;
    // @if shadow-dom
    // In Shadow DOM open mode, shadowRoot is also accessible through DOM API
    //   node.shadowRoot
    // But only Aurelia API can access shadowRoot in both open and closed mode.
    const shadowRoot = CustomElement.for(node).projector.provideEncapsulationSource();
    // @if babel
    const text = shadowRoot.textContent;
    // @endif
    // @if typescript
    const text = (shadowRoot as Node).textContent;
    // @endif
    // @endif
    // @if !shadow-dom
    const text =  node.textContent;
    // @endif
    // @if jasmine || jest
    expect(text.trim()).toBe('Hello World!');
    // @endif
    // @if mocha
    expect(text.trim()).to.equal('Hello World!');
    // @endif
  });
});
// @endif
