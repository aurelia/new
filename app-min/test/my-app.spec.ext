// @if ava
import test from 'ava';
// @endif
// @if tape
import test from 'tape';
// @endif
// @if mocha
import { expect } from 'chai';
// @endif
import Aurelia, { CustomElement } from 'aurelia';
import { MyApp } from '../src/my-app';

// @if babel
function createAu(template, ...deps) {
// @endif
// @if typescript
function createAu(template: string, ...deps: readonly unknown[]) {
// @endif
  const wrapper = CustomElement.define({name: 'wrapper', template});
  document.body.appendChild(document.createElement('wrapper'));
  return Aurelia.register(deps).app(wrapper);
}

function cleanup() {
  const wrapper = document.querySelector('wrapper');
  if (wrapper) {
    wrapper.remove();
  }
}

// @if ava || tape
test('my-app: should render message', async t => {
  const au = createAu('<my-app></my-app>', MyApp);
  await au.start().wait();
  const node = document.querySelector('my-app');
  // @if shadow-dom
  // In Shadow DOM open mode, shadowRoot is also accessible through DOM API
  //   node.shadowRoot
  // But only Aurelia API can access shadowRoot in both open and closed mode.
  const shadowRoot = CustomElement.for(node).projector.provideEncapsulationSource();
  // @if babel
  const text = shadowRoot.textContent;
  // @endif
  // @if typescript
  const text = (shadowRoot as Node).textContent;
  // @endif
  // @endif
  // @if !shadow-dom
  const text =  node.textContent;
  // @endif
  // @if ava
  t.is(text.trim(), 'Hello World!');
  // @endif
  // @if tape
  t.equal(text.trim(), 'Hello World!');
  // @endif
  await au.stop().wait();
  cleanup();
  // @if tape
  t.end();
  // @endif
});
// @endif
// @if jasmine || jest || mocha
describe('my-app', () => {
  afterEach(() => {
    cleanup();
  });

  it('should render message', async () => {
    const au = createAu('<my-app></my-app>', MyApp);
    await au.start().wait();
    const node = document.querySelector('my-app');
    // @if shadow-dom
    // In Shadow DOM open mode, shadowRoot is also accessible through DOM API
    //   node.shadowRoot
    // But only Aurelia API can access shadowRoot in both open and closed mode.
    const shadowRoot = CustomElement.for(node).projector.provideEncapsulationSource();
    // @if babel
    const text = shadowRoot.textContent;
    // @endif
    // @if typescript
    const text = (shadowRoot as Node).textContent;
    // @endif
    // @endif
    // @if !shadow-dom
    const text =  node.textContent;
    // @endif
    // @if jasmine || jest
    expect(text.trim()).toBe('Hello World!');
    // @endif
    // @if mocha
    expect(text.trim()).to.equal('Hello World!');
    // @endif
    await au.stop().wait();
    cleanup();
  });
});
// @endif
